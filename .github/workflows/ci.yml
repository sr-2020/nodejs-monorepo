name: CI

on: [push]

jobs:
  test:
    runs-on: ubuntu-latest
    outputs:
      sr2020_model_engine_affected: ${{ steps.detect_sr2020_model_engine.outputs.affected }}
      sr2020_models_manager_affected: ${{ steps.detect_sr2020_models_manager.outputs.affected }}
      sr2020_push_affected: ${{ steps.detect_sr2020_push.outputs.affected }}
      sr2020_admin_ui_affected: ${{ steps.detect_sr2020_admin_ui.outputs.affected }}
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - uses: bahmutov/npm-install@v1.1.0
      - uses: mansagroup/nrwl-nx-action@v1.0.1
        with:
          targets: lint,build,test
          affected: true
      - run: export NX_BASE=$(git rev-parse HEAD~1)
      - run: export NX_HEAD=$(git rev-parse HEAD)
      - run: yarn affected_apps
      - id: detect_sr2020_model_engine
        run: echo "::set-output name=affected::"`yarn affected_apps | grep sr2020-model-engine -c`
      - id: detect_sr2020_models_manager
        run: echo "::set-output name=affected::"`yarn affected_apps | grep sr2020-models-manager -c`
      - id: detect_sr2020_push
        run: echo "::set-output name=affected::"`yarn affected_apps | grep push -c`
      - id: detect_sr2020_admin_ui
        run: echo "::set-output name=affected::"`yarn affected_apps | grep sr2020-admin-ui -c`
  docker_models_manager:
    needs: [test]
    if: needs.test.outputs.sr2020_models_manager_affected == 1
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Build & push to dockerhub
        uses: elgohr/Publish-Docker-Github-Action@master
        with:
          name: sr2020/models-manager
          tags: ${{ github.sha }}
          dockerfile: packages/sr2020-models-manager/Dockerfile
          username: sr2020
          password: ${{ secrets.DOCKER_PASSWORD }}
  docker_model_engine:
    needs: [test]
    if: needs.test.outputs.sr2020_model_engine_affected == 1
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Build & push to dockerhub
        uses: elgohr/Publish-Docker-Github-Action@master
        with:
          name: sr2020/model-engine
          tags: ${{ github.sha }}
          dockerfile: packages/sr2020-model-engine/Dockerfile
          username: sr2020
          password: ${{ secrets.DOCKER_PASSWORD }}
  docker_push:
    needs: [test]
    if: needs.test.outputs.sr2020_push_affected == 1
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Build & push to dockerhub
        uses: elgohr/Publish-Docker-Github-Action@master
        with:
          name: sr2020/push
          tags: ${{ github.sha }}
          dockerfile: packages/push/Dockerfile
          username: sr2020
          password: ${{ secrets.DOCKER_PASSWORD }}
  deploy_admin_ui:
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/master' && needs.test.outputs.sr2020_admin_ui_affected == 1
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - uses: bahmutov/npm-install@v1.1.0
      - run: npx nx build sr2020-admin-ui --prod
      - uses: actions-hub/gcloud@318.0.0
        env:
          PROJECT_ID: imposing-elixir-249711
          APPLICATION_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
          CLI: gsutil
        with:
          args: -h "Cache-Control:no-cache,max-age=0" cp dist/packages/sr2020-admin-ui/* gs://admin-ui.evarun.ru

  deploy_push:
    runs-on: ubuntu-latest
    needs: [docker_push]
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          service_account_email: ${{ secrets.SA_EMAIL }}
          service_account_key: ${{ secrets.GCP_CREDENTIALS }}
      - run: gcloud components install kubectl
      - run: gcloud container clusters get-credentials prod --project imposing-elixir-249711 --zone europe-west3-b
      - uses: actions/checkout@v1
      - run: |
          kubectl config set-context --current --namespace=production
          kubectl set image deployment/push push=sr2020/push:$GITHUB_SHA --record
          kubectl rollout status deployment/push
  deploy_model_engine:
    runs-on: ubuntu-latest
    needs: [docker_model_engine]
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          service_account_email: ${{ secrets.SA_EMAIL }}
          service_account_key: ${{ secrets.GCP_CREDENTIALS }}
      - run: gcloud components install kubectl
      - run: gcloud container clusters get-credentials prod --project imposing-elixir-249711 --zone europe-west3-b
      - uses: actions/checkout@v1
      - run: |
          kubectl config set-context --current --namespace=production
          kubectl set image deployment/model-engine model-engine=sr2020/model-engine:$GITHUB_SHA --record
          kubectl rollout status deployment/model-engine
  deploy_models_manager:
    runs-on: ubuntu-latest
    needs: [docker_models_manager]
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          service_account_email: ${{ secrets.SA_EMAIL }}
          service_account_key: ${{ secrets.GCP_CREDENTIALS }}
      - run: gcloud components install kubectl
      - run: gcloud container clusters get-credentials prod --project imposing-elixir-249711 --zone europe-west3-b
      - uses: actions/checkout@v1
      - run: |
          kubectl config set-context --current --namespace=production
          kubectl set image deployment/models-manager models-manager=sr2020/models-manager:$GITHUB_SHA --record
          kubectl rollout status deployment/models-manager
